<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hi~ 来者皆是客</title>
  
  <subtitle>来坐下来喝一杯~~对~~喝一杯</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://darkgra.github.io/"/>
  <updated>2019-05-10T11:10:44.003Z</updated>
  <id>https://darkgra.github.io/</id>
  
  <author>
    <name>darkgra</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vuecli3项目</title>
    <link href="https://darkgra.github.io/2019/05/10/vuecli3%E9%A1%B9%E7%9B%AE/"/>
    <id>https://darkgra.github.io/2019/05/10/vuecli3项目/</id>
    <published>2019-05-09T22:44:03.000Z</published>
    <updated>2019-05-10T11:10:44.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="这是一个基于vue-cli3搭建的vue登陆管理项目"><a href="#这是一个基于vue-cli3搭建的vue登陆管理项目" class="headerlink" title="这是一个基于vue-cli3搭建的vue登陆管理项目"></a>这是一个基于vue-cli3搭建的vue登陆管理项目</h2><p>查看源代码<a href="https://github.com/darkgra/vuecli3" target="_blank" rel="noopener">请点这里</a></p><h2 id="第一步-项目前准备和vuecli3配置"><a href="#第一步-项目前准备和vuecli3配置" class="headerlink" title="第一步 ~~ 项目前准备和vuecli3配置"></a>第一步 ~~ 项目前准备和vuecli3配置</h2><a id="more"></a><p>1.下载第三方依赖和插件<br>后端数据交互axios;表单校验vee-validate;百度图形化组件库Echar;mint-ui组件库；hotcss解决px和rem转换；其他的vuecli3都配好了<br>2.使用vuecli3的图形界面配置项目，命令行vue ui打开图形界面，开始创建项目，项目配置手动选上vuex,vue-router,node-sass,和Elist语法限制，npm;然后直接点击运行和启动app就好。<br>3.用nodejs自己编写后端数据接口，用cors解决跨域问题，express框架进行服务器和路由的搭建，最后node启动该文件；<br><img src="/2019/05/10/vuecli3项目/t0.jpg" width="75%"><img src="/2019/05/10/vuecli3项目/t1.jpg" width="75%"></p><h2 id="第二步-对进来时的登陆组件编写"><a href="#第二步-对进来时的登陆组件编写" class="headerlink" title="第二步 ~~ 对进来时的登陆组件编写"></a>第二步 ~~ 对进来时的登陆组件编写</h2><p>结构划分为三部分<br>1.顶部和下面的椭圆长块，很简单两个div搞定<br>2.中间部分3个div里面放3个input:number，这里用vee-validate，在入口文件中导入使用，然后在div中用v-validate指令就好，然后记住密码和自动登陆的功能实现，直接来个类绑定就好，之中进行逻辑判断，记住密码就把数据存在localstroage中，自动登陆就在mounted时localstroage中取出数据，并自动触发底部的登陆<br>3.底部点击登陆时，要校验一遍this.errors.any()，然后把登陆成功登陆信息储存到localstroage和vuex中并跳转到home组件，加载时动画使用mint-ui的Toast，提示信息用Indicator,入口文件中导入引用还有样式导入，给个setTimeout模拟超时，并用axios的post请求将数据提交给后台<br><img src="/2019/05/10/vuecli3项目/t2.jpg" width="50%"></p><h2 id="第三步-对home组件进行编写"><a href="#第三步-对home组件进行编写" class="headerlink" title="第三步 ~~ 对home组件进行编写"></a>第三步 ~~ 对home组件进行编写</h2><p>结构划分为三部分<br>1.顶部都是由回退，中间内容，右侧跳转组成，那么将顶部封装成组件；回退直接this.$router.go(-1)；<br>2.中间将圆形数据图封装成组件，写3个，使用Echars上面的代码复制过来数据写成自定义的变量，之中的数据使用axios去请求后台的数据，将数据记录到变量中，记得在用到对应的三方依赖组件中导入引用<br>3.底部的九宫格，自己用伸缩盒子布局一下，然后一格封装成组件，再v-for里面写该组件，每个组件点击可跳转到对应的路由组件，之后编写这些组件<br><img src="/2019/05/10/vuecli3项目/t4.jpg" width="50%"></p><h2 id="第四步-后续的完善和问题"><a href="#第四步-后续的完善和问题" class="headerlink" title="第四步 ~~ 后续的完善和问题"></a>第四步 ~~ 后续的完善和问题</h2><p>。。完善。。<br>1.sass有许多相同的，如颜色和字号把他们写成变量，写道mian.sass中之后将该文件在vue.config.js中配置下，还有许多相同的代码块@mixin提取出来，用@include来引用。<br>2.在入口文件中添加路由的全局守卫router.beforeEach，防止用户没有登陆，直接通过/home访问后面的主页<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">  //路由的全局守卫</span><br><span class="line">  if (to.path != &quot;/&quot;) &#123;</span><br><span class="line">    if (helper.gettype(store.getters.getloginuser) === &quot;Object&quot;) &#123;</span><br><span class="line">      next();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      next(&quot;/&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>3.代码上传github,编写自己的博客进行总结.<br>。。问题。。<br>1.用vuecli3之后发现配置文件已经有许多不懂的了，要多看看官方文档<br>2.注册组件没有编写<br>3.没有将数据通过node的mongoose连接数据库mongedb储存</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;这是一个基于vue-cli3搭建的vue登陆管理项目&quot;&gt;&lt;a href=&quot;#这是一个基于vue-cli3搭建的vue登陆管理项目&quot; class=&quot;headerlink&quot; title=&quot;这是一个基于vue-cli3搭建的vue登陆管理项目&quot;&gt;&lt;/a&gt;这是一个基于vue-cli3搭建的vue登陆管理项目&lt;/h2&gt;&lt;p&gt;查看源代码&lt;a href=&quot;https://github.com/darkgra/vuecli3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;请点这里&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;第一步-项目前准备和vuecli3配置&quot;&gt;&lt;a href=&quot;#第一步-项目前准备和vuecli3配置&quot; class=&quot;headerlink&quot; title=&quot;第一步 ~~ 项目前准备和vuecli3配置&quot;&gt;&lt;/a&gt;第一步 ~~ 项目前准备和vuecli3配置&lt;/h2&gt;
    
    </summary>
    
      <category term="vuecli3" scheme="https://darkgra.github.io/categories/vuecli3/"/>
    
    
      <category term="vuecli3" scheme="https://darkgra.github.io/tags/vuecli3/"/>
    
  </entry>
  
  <entry>
    <title>webpack项目</title>
    <link href="https://darkgra.github.io/2019/05/06/webpack%E9%A1%B9%E7%9B%AE/"/>
    <id>https://darkgra.github.io/2019/05/06/webpack项目/</id>
    <published>2019-05-06T10:07:34.000Z</published>
    <updated>2019-05-10T11:02:11.557Z</updated>
    
    <content type="html"><![CDATA[<h2 id="这是一个基于webpack搭建的vue手机商城项目"><a href="#这是一个基于webpack搭建的vue手机商城项目" class="headerlink" title="这是一个基于webpack搭建的vue手机商城项目"></a>这是一个基于webpack搭建的vue手机商城项目</h2><p>查看源代码<a href="https://github.com/darkgra/webpack4" target="_blank" rel="noopener">请点这里</a></p><h2 id="第一步-项目前准备和文件配置"><a href="#第一步-项目前准备和文件配置" class="headerlink" title="第一步 ~~ 项目前准备和文件配置"></a>第一步 ~~ 项目前准备和文件配置</h2><p>-1-下载项目需要用到的三方依赖和插件<br><a id="more"></a><br>vue全家桶;ui组件库mui,mint-ui;各种文件对应的loader；webpack打包工具；以及用webpack-dev-server来自动保存打包由于要在我自己手机上进行测试和书写方便，需要配置下package.json文件。<br><img src="/2019/05/06/webpack项目/tu2.jpg" width="75%"><br>-2-编写webpack的配置文件，基于webpack一切皆模块的思想，每当出现新类型文件，就需要配置loader<br><img src="/2019/05/06/webpack项目/tu1.jpg" width="75%"></p><h2 id="第二步-对项目进行构建"><a href="#第二步-对项目进行构建" class="headerlink" title="第二步 ~~ 对项目进行构建"></a>第二步 ~~ 对项目进行构建</h2><p>-1-把app组件界面分为3个部分，顶部使用mint-ui的header，在入口文件中导入引用就好，底部的导航用mui中的tabber，在入口文件中导入样式，把代码复制到app组件中把a标签改成router-link连接路由，而中间放这些组件就可以了，但是后期需要动画，就如下写。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition&gt;</span><br><span class="line">  &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure></p><p>-2-进来时app组件的根路由直接改成home组件，home组件上面为mint-ui轮播图，图片数据用vue-resource请求，入口文件导入引用resource，下面为mui九宫格。以后无非是组件的切换了和细节的完善，整个项目构建完了。<br><img src="/2019/05/06/webpack项目/tu3.jpg" width="50%"></p><h2 id="第三步-home组件后续的各个组件和路由配置"><a href="#第三步-home组件后续的各个组件和路由配置" class="headerlink" title="第三步 ~~ home组件后续的各个组件和路由配置"></a>第三步 ~~ home组件后续的各个组件和路由配置</h2><p>-1-入口文件导入vue-router，vue实列中挂载和引用router.js的暴露，在router.js中导入各个组件进行路由和组件的匹配；</p><ul><li>2-各个组件的编写<br>  1.实现点击home组件的小米手机，出现一系列小米手机图片价格参考，其实就是Home组件的子路由匹配一个组件。<br>  2.实现点击子组件的图片，出现该款手机的具体参数，且在里面添加购买功能，点击购买产品添加至购物车组件。<br><img src="/2019/05/06/webpack项目/tu5.jpg" width="50%"><img src="/2019/05/06/webpack项目/tu4.jpg" width="50%"><h2 id="第四步-购物组件和后续的完善"><a href="#第四步-购物组件和后续的完善" class="headerlink" title="第四步 ~~ 购物组件和后续的完善"></a>第四步 ~~ 购物组件和后续的完善</h2>-购物车组件的编写-<br>1.不同组件通过vuex来实现数据共享，为了实现数据持久化配合localstroage，入口文件导入挂载vuex，购物车组件取出vuex中的数据进行编写，在这里用v-if来实现当用户添加进来了，就切换到另一个组件。<br>2.实现，商品的数量控制，商品的删除，是非购买的选项，总价的动态计算。</li><li>完善<br>  1.不同组件的切换，编写css实现动画滑动效果。<br>  2.底部导航条可以换好看的字体图标。<br>  3.代码上传github,编写自己的博客进行总结.<br><img src="/2019/05/06/webpack项目/tu6.jpg" width="50%"><img src="/2019/05/06/webpack项目/tu7.jpg" width="50%"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;这是一个基于webpack搭建的vue手机商城项目&quot;&gt;&lt;a href=&quot;#这是一个基于webpack搭建的vue手机商城项目&quot; class=&quot;headerlink&quot; title=&quot;这是一个基于webpack搭建的vue手机商城项目&quot;&gt;&lt;/a&gt;这是一个基于webpack搭建的vue手机商城项目&lt;/h2&gt;&lt;p&gt;查看源代码&lt;a href=&quot;https://github.com/darkgra/webpack4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;请点这里&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;第一步-项目前准备和文件配置&quot;&gt;&lt;a href=&quot;#第一步-项目前准备和文件配置&quot; class=&quot;headerlink&quot; title=&quot;第一步 ~~ 项目前准备和文件配置&quot;&gt;&lt;/a&gt;第一步 ~~ 项目前准备和文件配置&lt;/h2&gt;&lt;p&gt;-1-下载项目需要用到的三方依赖和插件&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="webpack" scheme="https://darkgra.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="https://darkgra.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="https://darkgra.github.io/2019/01/18/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>https://darkgra.github.io/2019/01/18/第一篇博客/</id>
    <published>2019-01-18T13:40:48.000Z</published>
    <updated>2019-05-06T10:08:16.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    window.onload = function()&#123;</span><br><span class="line">        alert(&apos;来坐下来喝一杯~~对~~喝一杯&apos;);</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><hr><h2 id="文章块"><a href="#文章块" class="headerlink" title="文章块"></a>文章块</h2><table><thead><tr><th>姓名</th><th style="text-align:center">技能</th><th style="text-align:right">排行</th></tr></thead><tbody><tr><td>大脑斧</td><td style="text-align:center">卖萌</td><td style="text-align:right">老大</td></tr></tbody></table><span itemprop="image" itemscope itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="/2019/01/18/第一篇博客/shuai.png" class="full-image" alt="alt" title="title"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><div class="note success">            <p>就是前面的那个颜色 </p>          </div><hr><h2 id="markdown语法实验块"><a href="#markdown语法实验块" class="headerlink" title="markdown语法实验块"></a>markdown语法实验块</h2><blockquote><blockquote><blockquote><p>应用</p></blockquote></blockquote></blockquote><blockquote class="blockquote-center"><p>blah blah blah </p></blockquote><ul><li>列表<br>  1.列表内容<br>  2.列表内容</li><li>列表<br>  a.ni</li></ul><p><a href="http://baidu.com" target="_blank" rel="noopener">百度</a> :<a href="http://baidu.com" target="_blank" rel="noopener">http://baidu.com</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;代码块&quot;&gt;&lt;a href=&quot;#代码块&quot; class=&quot;headerlink&quot; title=&quot;代码块&quot;&gt;&lt;/a&gt;代码块&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    window.onload = function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        alert(&amp;apos;来坐下来喝一杯~~对~~喝一杯&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="各种第一" scheme="https://darkgra.github.io/categories/%E5%90%84%E7%A7%8D%E7%AC%AC%E4%B8%80/"/>
    
    
      <category term="点击到tags" scheme="https://darkgra.github.io/tags/%E7%82%B9%E5%87%BB%E5%88%B0tags/"/>
    
  </entry>
  
</feed>
